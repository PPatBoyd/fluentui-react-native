import * as React from 'react';
import { ScreenRect, Text, View, Picker } from 'react-native';
import { Button, Callout, Separator, DirectionalHint } from '@fluentui/react-native';
import { fabricTesterStyles } from '../Common/styles';

const defaultValueText = 'Default';
type WithDefaultText<T> = T | typeof defaultValueText;

const allAlignments: WithDefaultText<DirectionalHint>[] = [
  defaultValueText,
  'leftTopEdge',
  'leftCenter',
  'leftBottomEdge',
  'topLeftEdge',
  'topAutoEdge',
  'topCenter',
  'topRightEdge',
  'rightTopEdge',
  'rightCenter',
  'rightBottomEdge',
  'bottomLeftEdge',
  'bottomAutoEdge',
  'bottomCenter',
  'bottomRightEdge'
];

export const CalloutTest: React.FunctionComponent<{}> = () => {
  const [showStandardCallout, setShowStandardCallout] = React.useState(false);
  const [showCustomizedCallout, setShowCustomizedCallout] = React.useState(false);
  const [isStandardCalloutVisible, setIsStandardCalloutVisible] = React.useState(false);
  const [isCustomizedCalloutVisible, setIsCustomizedCalloutVisible] = React.useState(false);

  const custBtnRef = React.useRef<Text>(null);

  const toggleShowStandardCallout = React.useCallback(() => {
    setShowStandardCallout(!showStandardCallout);

    // Unmounting a callout does not invoke onDismiss; onDismiss is only invoked
    // for dismissals generated by the native app.  When toggling to 'show',
    // the isVisible state will be corrected to 'true' by the onShow callback.
    setIsStandardCalloutVisible(false);
  }, [showStandardCallout, setIsStandardCalloutVisible, setShowStandardCallout]);

  const toggleShowCustomizedCallout = React.useCallback(() => {
    setShowCustomizedCallout(!showCustomizedCallout);

    // Unmounting a callout does not invoke onDismiss; onDismiss is only invoked
    // for dismissals generated by the native app.  When toggling to 'show',
    // the isVisible state will be corrected to 'true' by the onShow callback.
    setIsCustomizedCalloutVisible(false);
  }, [showCustomizedCallout, setIsCustomizedCalloutVisible, setShowCustomizedCallout]);

  const onShowStandardCallout = React.useCallback(() => {
    setIsStandardCalloutVisible(true);
  }, [setIsStandardCalloutVisible]);

  const onShowCustomizedCallout = React.useCallback(() => {
    setIsCustomizedCalloutVisible(true);
  }, [setIsCustomizedCalloutVisible]);

  const onDismissStandardCallout = React.useCallback(() => {
    setIsStandardCalloutVisible(false);

    // setting the internal state to false will instigate unmounting the
    // zombie Callout control.
    setShowStandardCallout(false);
  }, [setIsStandardCalloutVisible, setShowStandardCallout]);

  const onDismissCustomizedCallout = React.useCallback(() => {
    setIsCustomizedCalloutVisible(false);

    // setting the internal state to false will instigate unmounting the
    // zombie Callout control.
    setShowCustomizedCallout(false);
  }, [setIsCustomizedCalloutVisible, setShowCustomizedCallout]);

  // Picker options
  const [directionalHint, setDirectionalHint] = React.useState<WithDefaultText<DirectionalHint>>('bottomLeftEdge');

  const onDirectionalHintChange = React.useCallback(value => setDirectionalHint(value), []);

  const myRect: ScreenRect = { screenX: 10, screenY: 10, width: 100, height: 100 };
  return (
    <View>
      <Text style={fabricTesterStyles.testSection}>Standard Usage</Text>
      <Separator />
      <View style={{ flexDirection: 'row' }}>
        <View style={{ flexDirection: 'column' }}>
          <Picker prompt="DirectionalHint" selectedValue={directionalHint} onValueChange={onDirectionalHintChange}>
            {allAlignments.map((size, index) => (
              <Picker.Item label={size} key={index} value={size} />
            ))}
          </Picker>
        </View>
        <View style={{ flexDirection: 'column' }}>
          <Button content="Press for Callout" onClick={toggleShowStandardCallout} />
          <Text>
            <Text>Visibility: </Text>
            {isStandardCalloutVisible ? <Text style={{ color: 'green' }}>Visible</Text> : <Text style={{ color: 'red' }}>Not Visible</Text>}
          </Text>
        </View>
      </View>

      {showStandardCallout && (
        <Callout
          anchorRect={myRect}
          onDismiss={onDismissStandardCallout}
          onShow={onShowStandardCallout}
          directionalHint={directionalHint === defaultValueText ? undefined : directionalHint}
        >
          <View style={{ height: 200, width: 400 }}>
            <Button content="test button please ignore" onClick={toggleShowStandardCallout} />
          </View>
        </Callout>
      )}

      <Text ref={custBtnRef} style={fabricTesterStyles.testSection}>
        Customized Usage
      </Text>
      <Separator />

      <View style={{ flexDirection: 'row' }}>
        <Button content="Press for Callout" onClick={toggleShowCustomizedCallout} />
        <Text>
          <Text>Visibility: </Text>
          {isCustomizedCalloutVisible ? <Text style={{ color: 'green' }}>Visible</Text> : <Text style={{ color: 'red' }}>Not Visible</Text>}
        </Text>
      </View>

      {showCustomizedCallout && (
        <Callout target={custBtnRef} onDismiss={onDismissCustomizedCallout} onShow={onShowCustomizedCallout}>
          <View style={{ height: 300, width: 500 }}>
            <Button content="test button please also ignore" onClick={toggleShowCustomizedCallout} />
          </View>
        </Callout>
      )}
    </View>
  );
};
